from telebot import TeleBot, types
from PIL import Image, ImageEnhance
import os
import io
import msg_saver
from gpt import Dialog
from models import load_model
from transformers import pipeline
from googletrans import Translator
import asyncio
import logging
import torch
import emoji

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TOKEN = ''
bot = TeleBot(TOKEN)
gpt_dialog = Dialog()
try:
    image_model = load_model()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}", exc_info=True)
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
    image_model = None
IS_RUNNING = False

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
user_states = {}  # user_id: state
user_data = {}  # user_id: {height: , weight: , allergies: , preferences: , profile_filled: True/False}

# --- –°–ü–ò–°–û–ö –ò–ó–ë–†–ê–ù–ù–û–ì–û ---
favorites = {}  # user_id: [recipe_name]

# --- Transformers pipeline ---
image_to_text = pipeline("image-to-text", model="Salesforce/blip-image-captioning-base")

# --- Translator ---
translator = Translator()


# --- Inline keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
def generate_image_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=emoji.emojize("‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                                            callback_data="generate_image"))
    keyboard.add(types.InlineKeyboardButton(text=emoji.emojize("üö´ –ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç"), callback_data="no_image"))
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data in ["generate_image", "no_image"])
def handle_image_choice(call):
    user_id = call.message.chat.id
    generate_image_flag = call.data == "generate_image"
    bot.delete_message(user_id, call.message.message_id)

    user_messages = msg_saver.get_messages(user_id)
    if user_messages and len(user_messages) > 1:
        last_user_message = user_messages[-1]["content"]
        generate_recipe(user_id, last_user_message, generate_image_flag)
    else:
        bot.send_message(user_id, emoji.emojize("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Ü–µ–ø—Ç —Å–Ω–∞—á–∞–ª–∞. üìù"),
                         reply_markup=create_markup())


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    start_message(user_id)


@bot.message_handler(func=lambda message: message.text == emoji.emojize("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"))
def random_ingredient(message):
    ingredient = gpt_dialog.ask_once("–ù–∞–∑–æ–≤–∏ –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –µ–¥—ã.")
    bot.send_message(message.chat.id, f"{emoji.emojize('‚ú® –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ')} {ingredient}",
                     reply_markup=create_markup())


@bot.message_handler(func=lambda message: message.text == emoji.emojize("üçΩ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ"))
def random_dish(message):
    dish = gpt_dialog.ask_once("–ù–∞–∑–æ–≤–∏ –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ.")
    bot.send_message(message.chat.id, f"{emoji.emojize('‚ú® –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ: ')} {dish}", reply_markup=create_markup())


@bot.message_handler(func=lambda message: message.text == emoji.emojize("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"))
def show_favorites(message):
    user_id = message.from_user.id
    if user_id in favorites and favorites[user_id]:
        bot.send_message(message.chat.id, f"{emoji.emojize('üåü –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n')}" + "\n".join(favorites[user_id]),
                         reply_markup=create_markup())
    else:
        bot.send_message(message.chat.id, emoji.emojize("üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. üòî"),
                         reply_markup=create_markup())


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    bot.send_message(message.chat.id, emoji.emojize("üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... üîé"))
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        image_stream = io.BytesIO(downloaded_file)  # Use BytesIO to handle image data in memory
        image = Image.open(image_stream).convert("RGB") # Ensure image is in RGB format

        description = image_to_text(image)[0]['generated_text']  # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        translated = translator.translate(description, dest='ru')
        translated_text = translated.text

        bot.send_message(message.chat.id, f"{emoji.emojize('üí° –û–ø–∏—Å–∞–Ω–∏–µ: ')}{translated_text}")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")  # Log the full exception
        bot.send_message(message.chat.id, f"{emoji.emojize('‚ùó –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ')}{e}")

    bot.send_message(message.chat.id, emoji.emojize("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å? üòä"), reply_markup=create_markup())


# --- –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ò–ó–ë–†–ê–ù–ù–û–ï ---
def add_to_favorites(user_id, recipe_name):
    if user_id not in favorites:
        favorites[user_id] = []
    if recipe_name not in favorites[user_id]:
        favorites[user_id].append(recipe_name)
        return True
    else:
        return False


# --- –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–†–û–°–ê ---
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_for_height")
def get_height(message):
    user_id = message.from_user.id
    try:
        height = int(message.text)
        if height < 50 or height > 250:
            bot.send_message(user_id, emoji.emojize("ü§® –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—à–∏–±–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 50 –¥–æ 250):"))
            return
        user_data[user_id]["height"] = height
        bot.send_message(user_id, emoji.emojize("üèãÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:"))
        user_states[user_id] = "waiting_for_weight"
    except ValueError:
        bot.send_message(user_id, emoji.emojize("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞."))


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_for_weight")
def get_weight(message):
    user_id = message.from_user.id
    try:
        weight = int(message.text)
        if weight < 10 or weight > 500:
            bot.send_message(user_id, emoji.emojize("ü§î –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 10 –¥–æ 500):"))
            return
        user_data[user_id]["weight"] = weight
        bot.send_message(user_id, emoji.emojize("üçé –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-–ª–∏–±–æ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø–∏—â–µ–≤—ã–µ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏? (–ù–∞–ø—Ä–∏–º–µ—Ä, –ª–∞–∫—Ç–æ–∑–∞, –≥–ª—é—Ç–µ–Ω)"))
        user_states[user_id] = "waiting_for_allergies"
    except ValueError:
        bot.send_message(user_id, emoji.emojize("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ—Å–∞."))


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_for_allergies")
def get_allergies(message):
    user_id = message.from_user.id
    allergies = message.text
    user_data[user_id]["allergies"] = allergies
    bot.send_message(user_id, emoji.emojize("üå± –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ, –∫–µ—Ç–æ, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞):"))
    user_states[user_id] = "waiting_for_preferences"


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_for_preferences")
def get_preferences(message):
    user_id = message.from_user.id
    preferences = message.text
    user_data[user_id]["preferences"] = preferences
    user_data[user_id]["profile_filled"] = True
    bot.send_message(user_id, emoji.emojize(
        "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –ù–∞–∂–º–∏—Ç–µ '–ö–æ—Ç–µ–ª–û–ö –≤–∞—Ä–∏!' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å! üç≥"),
                     reply_markup=create_markup())
    user_states[user_id] = None


# --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê ---
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global IS_RUNNING
    print_user(message)
    user_id = message.from_user.id

    if message.text.startswith("+–∏–∑–±—Ä–∞–Ω–Ω–æ–µ"):
        recipe_name = message.text[len("+–∏–∑–±—Ä–∞–Ω–Ω–æ–µ"):].strip()
        if add_to_favorites(user_id, recipe_name):
            bot.send_message(user_id,
                             f"{emoji.emojize('‚úÖ –†–µ—Ü–µ–ø—Ç')} '{recipe_name}' {emoji.emojize('–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚ù§Ô∏è')}",
                             reply_markup=create_markup())
        else:
            bot.send_message(user_id,
                             f"{emoji.emojize('‚ÑπÔ∏è –†–µ—Ü–µ–ø—Ç')} '{recipe_name}' {emoji.emojize('—É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º! ‚ù§Ô∏è')}",
                             reply_markup=create_markup())
        IS_RUNNING = False
        return

    if IS_RUNNING:
        bot.send_message(user_id, emoji.emojize('‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –∑–∞–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. üßò'),
                         reply_markup=create_markup())
        return

    IS_RUNNING = True
    try:
        user_messages = msg_saver.get_messages(user_id)
        if message.text == emoji.emojize('üç≥ –ö–æ—Ç–µ–ª–û–ö –≤–∞—Ä–∏!'):
            if user_messages is not None:
                gpt_dialog.messages = user_messages
                gpt_dialog.clear_messages()
                msg_saver.save_messages(user_id, gpt_dialog.messages)
            handle_kotelok_vari(message)
            return

        bot.send_message(user_id, emoji.emojize("‚ú® –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞? üñºÔ∏è"),
                         reply_markup=generate_image_keyboard())

        msg_saver.save_messages(user_id, gpt_dialog.messages + [{"role": "user", "content": message.text}])

    finally:
        IS_RUNNING = False


def generate_recipe(user_id, user_message, generate_image_flag):
    try:
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: '{user_message}'.  –í–∫–ª—é—á–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Ç–æ—á–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.  –ò–∑–±–µ–≥–∞–π –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ä–µ—Ü–µ–ø—Ç –ø–æ–Ω—è—Ç–µ–Ω –∏ –ª–µ–≥–æ–∫ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏."

        if user_id in user_data and user_data[user_id].get("profile_filled"):
            prompt += f" –£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–æ—Å—Ç - {user_data[user_id]['height']} —Å–º, –≤–µ—Å - {user_data[user_id]['weight']} –∫–≥, –∞–ª–ª–µ—Ä–≥–∏–∏ - {user_data[user_id]['allergies']}, –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è - {user_data[user_id]['preferences']}."

        ans = gpt_dialog.ask(prompt)
        print(ans)
        bot.send_message(user_id, ans, reply_markup=create_markup())
        bot.send_message(user_id, emoji.emojize(
            "‚úçÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: +–∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ–†–µ—Ü–µ–ø—Ç–∞(—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚ù§Ô∏è"))

        if generate_image_flag:
            prompt = gpt_dialog.ask_once('–ö–∞–∫–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ: ' + ans)
            print(prompt)
            msq_wait = bot.send_message(user_id, emoji.emojize('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üé®'))
            try:
                if image_model:
                    image = generate_image(prompt)
                    bot.delete_message(user_id, msq_wait.message_id)
                    if image:
                        with open('image.png', 'rb') as photo:
                            bot.send_photo(user_id, photo=photo)
                    else:
                        bot.send_message(user_id, emoji.emojize("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. üòî"))

                else:
                    bot.delete_message(user_id, msq_wait.message_id)
                    bot.send_message(user_id, emoji.emojize("‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. üòî"))

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
                bot.delete_message(user_id, msq_wait.message_id)
                bot.send_message(user_id, f"{emoji.emojize('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ')}{e}")
        else:
            bot.send_message(user_id, emoji.emojize("üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. üé®"))

        msg_saver.save_messages(user_id, gpt_dialog.messages)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        bot.send_message(user_id, f"{emoji.emojize('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: ')}{e}")


def print_user(message):
    print(f'{message.from_user.full_name} [@{message.from_user.username}]: {message.text}')


def create_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_new = types.KeyboardButton(emoji.emojize('üç≥ –ö–æ—Ç–µ–ª–û–ö –≤–∞—Ä–∏!'))
    btn_random_ingredient = types.KeyboardButton(emoji.emojize("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"))
    btn_random_dish = types.KeyboardButton(emoji.emojize("üçΩ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ"))
    btn_favorites = types.KeyboardButton(emoji.emojize("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"))

    markup.add(btn_new)
    markup.add(btn_random_ingredient, btn_random_dish)
    markup.add(btn_favorites)
    return markup


def start_message(user_id):
    # Keyboard
    keyboard = types.InlineKeyboardMarkup()
    if user_id not in user_data or not user_data[user_id].get("profile_filled"):
        keyboard.add(types.InlineKeyboardButton(text=emoji.emojize("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"), callback_data="fill_profile"))

    bot.send_message(user_id,
                     emoji.emojize("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ö–æ—Ç–µ–ª–û–ö*! üéâ\n\n"
                                   "–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ò–ò ü§ñüç≥, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å –Ω–∞ –∫—É—Ö–Ω–µ –ø—Ä–æ—â–µ, "
                                   "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏ –≤–∫—É—Å–Ω–µ–µ!\n\n"
                                   "–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å:\n"
                                   "‚ú® –ü–æ–ª—É—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ *–Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–æ—Ä—â', '–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞')\n"
                                   "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ *–∏–º–µ—é—â–∏—Ö—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤* (–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö!)\n"
                                   "‚ú® –ó–∞–≥—Ä—É–∂–∞—Ç—å *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏* –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É, —á—Ç–æ –∏–∑ –Ω–∏—Ö –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å!\n"
                                   "‚ú® –û—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–ª—è —Å–µ–±—è *—Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –±–ª—é–¥–∞* –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è\n"
                                   "‚ú® –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –∏—Ö –ø–æ–¥ —Ä—É–∫–æ–π\n\n"
                                   f"{'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É:' if user_id not in user_data or not user_data[user_id].get('profile_filled') else '–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –ö–æ—Ç–µ–ª–û–ö –≤–∞—Ä–∏!'}") + emoji.emojize(
                         " üòä"),
                     parse_mode="Markdown",
                     reply_markup=keyboard if user_id not in user_data or not user_data[user_id].get(
                         "profile_filled") else create_markup())  # –ò–∑–º–µ–Ω–µ–Ω–æ


def handle_kotelok_vari(message):
    user_id = message.from_user.id

    if user_id not in user_data or not user_data[user_id].get("profile_filled"):
        bot.send_message(user_id, emoji.emojize(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –Ω–∞–∏–ª—É—á—à–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã! –ù–∞–∂–º–∏—Ç–µ /start üöÄ"),
                         reply_markup=create_markup())
        return

    bot.send_message(user_id, emoji.emojize(
        "‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å, –º–µ–Ω—é –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å. ‚úçÔ∏è"))


@bot.callback_query_handler(func=lambda call: call.data == "fill_profile")
def fill_profile(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    user_data[user_id] = {}
    bot.send_message(user_id, emoji.emojize("üìè –î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:"))
    user_states[user_id] = "waiting_for_height"


def improve_image(image: Image.Image, path: str):
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(2.5)
    image = image.convert('RGB')
    image.save(path, "PNG")
    return image


def generate_image(text):
    try:
        with torch.no_grad():
            prompt = f"{text}, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, 8k, 4k, studio lighting, food photography"
            image = image_model.generate_image(
                text=prompt,
                seed=-1,
                grid_size=1,
                is_seamless=True
            )
            save_image(image, 'image.png')

            return 'image.png'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


def save_image(image: Image.Image, path: str):
    if os.path.isdir(path):
        path = os.path.join(path, 'generated.png')
    elif not path.endswith('.png'):
        path += '.png'
    print("saving image to", path)
    image.save(path)
    image.close()
    return


if __name__ == '__main__':
    try:
        bot.polling(none_stop=True, interval=0)
    finally:
        bot.stop_polling()
        asyncio.run(bot.close())